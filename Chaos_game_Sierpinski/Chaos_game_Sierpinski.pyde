'''
The chaos game Sierpinski triangle is generated by starting at a vertex of the 
triangle and repeatedly choosing a vertex and moving the point to the midpoint
of the current point and that vertex.
'''

from random import randrange

class Point:
    # The point class represents points in 2D space
    def __init__(self, x, y):
        # Points are represented by an x and y coordinate
        self.x = x
        self.y = y
    
    def __add__(A, B):
        # Adding points is defined as finding their midpoint, to make the code easier to write
        return Point((A.x + B.x)/2.0 , (A.y + B.y)/2.0)    
    
    def plot(self):
        # Draws the point to the canvas
        point(self.x, self.y)
        
def setup():
    # Set up the canvas, background, triangle and colours
    size(500, 500)
    colorMode(HSB, 360, 100, 100)
    background(randrange(360), 20, 90)
    fill(0)
    triangle(0.2 * width, 0.75 * height, 0.48 * width, 0.2 * height, 0.76 * width, 0.75 * height)
    stroke(256)
    
    global t # t is the list of triangle vertices
    t = [Point(0.2 * width, 0.75 * height), Point(0.48 * width, 0.2 * height), Point(0.76 * width, 0.75 * height)]
    global c # c is the current point
    c = Point(0.2 * width, 0.75 * height)
        

def draw():
    global c 
    for i in range(100):
        # Averages the current point with a random triangle vertex
        c = c + t[randrange(3)]
        # Plots this point on the screen
        c.plot()



